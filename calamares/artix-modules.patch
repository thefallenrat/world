From 688346fbccb5f13d1700188a4698afef7964f67d Mon Sep 17 00:00:00 2001
From: udeved <artoo@cromnix.org>
Date: Mon, 18 Dec 2017 23:30:02 +0100
Subject: [PATCH] add artix modules

---
 src/modules/chrootcfg/chrootcfg.conf     |  12 ++
 src/modules/chrootcfg/main.py            | 233 +++++++++++++++++++++++++++++++
 src/modules/chrootcfg/module.desc        |   6 +
 src/modules/postcfg/main.py              |  66 +++++++++
 src/modules/postcfg/module.desc          |   6 +
 src/modules/servicescfg/main.py          |  90 ++++++++++++
 src/modules/servicescfg/module.desc      |   6 +
 src/modules/servicescfg/servicescfg.conf |  12 ++
 8 files changed, 431 insertions(+)
 create mode 100644 src/modules/chrootcfg/chrootcfg.conf
 create mode 100644 src/modules/chrootcfg/main.py
 create mode 100644 src/modules/chrootcfg/module.desc
 create mode 100644 src/modules/postcfg/main.py
 create mode 100644 src/modules/postcfg/module.desc
 create mode 100644 src/modules/servicescfg/main.py
 create mode 100644 src/modules/servicescfg/module.desc
 create mode 100644 src/modules/servicescfg/servicescfg.conf

diff --git a/src/modules/chrootcfg/chrootcfg.conf b/src/modules/chrootcfg/chrootcfg.conf
new file mode 100644
index 000000000..e90eb615a
--- /dev/null
+++ b/src/modules/chrootcfg/chrootcfg.conf
@@ -0,0 +1,12 @@
+---
+requirements:
+    - name: /etc
+      mode: "0o755"
+    - name: /var/cache/pacman/pkg
+      mode: "0o755"
+    - name: /var/lib/pacman
+      mode: "0o755"
+
+keyrings:
+    - archlinux
+    - artix
diff --git a/src/modules/chrootcfg/main.py b/src/modules/chrootcfg/main.py
new file mode 100644
index 000000000..b933b8501
--- /dev/null
+++ b/src/modules/chrootcfg/main.py
@@ -0,0 +1,233 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+#
+# === This file is part of Calamares - <http://github.com/calamares> ===
+#
+#   Copyright 2016, Artoo <artoo@manjaro.org>
+#   Copyright 2017, Philip Müller <philm@manjaro.org>
+#   Copyright 2016, Artoo <artoo@cromnix.org>
+#
+#   Calamares is free software: you can redistribute it and/or modify
+#   it under the terms of the GNU General Public License as published by
+#   the Free Software Foundation, either version 3 of the License, or
+#   (at your option) any later version.
+#
+#   Calamares is distributed in the hope that it will be useful,
+#   but WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#   GNU General Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License
+#   along with Calamares. If not, see <http://www.gnu.org/licenses/>.
+
+import os
+import re
+import shutil
+import subprocess
+import libcalamares
+from os.path import join
+
+from libcalamares.utils import check_target_env_call, target_env_call, debug
+
+ON_POSIX = os.name == 'posix'
+
+
+class OperationTracker:
+    """Tracks the overall operation process
+    """
+
+    def __init__(self):
+        self.downloaded = 0
+        self.installed = 0
+        self.total = 0
+        self.progress = 0.00
+
+    def send_progress(self, counter, phase):
+        """Send progress to calamares
+        """
+
+        for _ in range(phase):
+            if self.total == 0:
+                continue
+
+            self.progress += (
+                0.05 + (0.95 * (counter / self.total))
+            ) / self.total
+            debug("Progress: {}".format(self.progress))
+
+        libcalamares.job.setprogress(self.progress)
+
+
+class PacmanController:
+    """Wrapper around pacman
+    """
+
+    def __init__(self, root):
+        self.root = root
+        self.operations = libcalamares.globalstorage.value(
+            'packageOperations'
+        )
+        self.tracker = OperationTracker()
+        self.keyrings = libcalamares.job.configuration.get('keyrings', [])
+
+    def init_keyring(self):
+        """Initializes pacman keyring
+        """
+
+        target_env_call(["pacman-key", "--init"])
+
+    def populate_keyring(self):
+        """Populates pacman keyring
+        """
+
+        target_env_call(["pacman-key", "--populate"] + self.keyrings)
+
+    def parse_output(self, cmd):
+        """Parses installation output
+        """
+
+        cal_env = os.environ.copy()
+        cal_env["LC_ALL"] = "C"
+        last = []
+        phase = 0
+
+        process = subprocess.Popen(
+            cmd,
+            env=cal_env,
+            bufsize=1,
+            stdout=subprocess.PIPE,
+            close_fds=ON_POSIX
+        )
+
+        line = process.stdout.readline()
+        while line:
+            pkgs = re.findall(r'\((\d+)\)', line.decode())
+            dl = re.findall(r'downloading\s+(.*).pkg.tar.xz', line.decode())
+            inst = re.findall(r'installing(.*)\.\.\.', line.decode())
+
+            if pkgs:
+                self.tracker.total = (int(pkgs[0]))
+                debug("Number of packages: {}".format(self.tracker.total))
+
+            if dl:
+                if dl != last:
+                    self.tracker.downloaded += 1
+                    phase = 1
+                    debug("Downloading: {}".format(dl[0]))
+                    debug("Downloaded packages: {}".format(
+                        self.tracker.downloaded
+                    ))
+                    self.tracker.send_progress(self.tracker.downloaded, phase)
+
+                last = dl
+            elif inst:
+                self.tracker.installed += 1
+                phase = 2
+                debug("Installing: {}".format(inst[0]))
+                debug("Installed packages: {}".format(self.tracker.installed))
+                self.tracker.send_progress(self.tracker.installed, phase)
+
+            line = process.stdout.readline()
+
+        if process.returncode != 0:
+            return process.kill()
+
+        return None
+
+    def install(self, pkglist, local=False):
+        """Install the given packagelist
+        """
+
+        cachedir = join(self.root, "var/cache/pacman/pkg")
+        dbdir = join(self.root, "var/lib/pacman")
+
+        args = 'pacman --noconfirm {} --cachedir {} --root {} --dbpath {} {}'
+        cmd = args.format(
+            '-U' if local else '-Sy', cachedir, self.root, dbdir,
+            ' '.join(pkglist)
+        )
+
+        self.parse_output(cmd.split())
+
+    def remove(self, pkglist):
+        """Remove the given packagelist
+        """
+
+        check_target_env_call(
+            'chroot {} pacman -Rs --noconfirm {}'.format(self.root, pkglist)
+        )
+
+    def run(self):
+        """Run operations
+        """
+
+        ops = self.operations[0]
+        for key in ops.keys():
+            debug("key: {}".format(key))
+            pkgs = ops[key]
+            if key in ["install", "localinstall"]:
+                self.install(pkgs, local=False if key == 'install' else True)
+            elif key == "remove":
+                self.tracker.total(len(pkgs))
+                self.remove(pkgs)
+            elif key == "try_install":
+                self.install(pkgs)
+            elif key == "try_remove":
+                self.remove(pkgs)
+
+        self.init_keyring()
+        self.populate_keyring()
+
+
+class ChrootController:
+    """Chroot controller
+    """
+
+    def __init__(self):
+        self.root = libcalamares.globalstorage.value('rootMountPoint')
+        self.requirements = libcalamares.job.configuration.get(
+            'requirements', []
+        )
+
+    def make_dirs(self):
+        """Create needed directories
+        """
+
+        for target in self.requirements:
+            dest = '{}{}'.format(self.root, target['name'])
+            if not os.path.exists(dest):
+                debug("Create: {}".format(dest))
+                mod = int(target["mode"], 8)
+                debug("Mode: {}".format(oct(mod)))
+                os.makedirs(dest, mode=mod)
+
+    def copy_file(self, file):
+        """Copy the given file into root
+        """
+
+        orig = os.path.join("/", file)
+        if os.path.exists(orig):
+            shutil.copy2(orig, os.path.join(self.root, file))
+
+    def prepare(self):
+        """Prepare root environment
+        """
+
+        cal_umask = os.umask(0)
+        self.make_dirs()
+        os.umask(cal_umask)
+        self.copy_file('etc/resolv.conf')
+
+    def run(self):
+        """Execute the controller
+        """
+
+        self.prepare()
+        return PacmanController(self.root).run()
+
+
+def run():
+    """Download and install package selection
+    """
+
+    return ChrootController().run()
diff --git a/src/modules/chrootcfg/module.desc b/src/modules/chrootcfg/module.desc
new file mode 100644
index 000000000..6020a9583
--- /dev/null
+++ b/src/modules/chrootcfg/module.desc
@@ -0,0 +1,6 @@
+# Syntax is YAML 1.2
+---
+type:       "job"
+name:       "chrootcfg"
+interface:  "python"
+script:     "main.py"   #assumed relative to the current directory
diff --git a/src/modules/postcfg/main.py b/src/modules/postcfg/main.py
new file mode 100644
index 000000000..c4b2d735b
--- /dev/null
+++ b/src/modules/postcfg/main.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+#
+# === This file is part of Calamares - <http://github.com/calamares> ===
+#
+#   Copyright 2014 - 2016, Philip Müller <philm@manjaro.org>
+#   Copyright 2016, Artoo <artoo@manjaro.org>
+#   Copyright 2016, Artoo <artoo@cromnix.org>
+#
+#   Calamares is free software: you can redistribute it and/or modify
+#   it under the terms of the GNU General Public License as published by
+#   the Free Software Foundation, either version 3 of the License, or
+#   (at your option) any later version.
+#
+#   Calamares is distributed in the hope that it will be useful,
+#   but WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#   GNU General Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License
+#   along with Calamares. If not, see <http://www.gnu.org/licenses/>.
+
+
+from os.path import join, exists
+
+import libcalamares
+from libcalamares.utils import target_env_call
+
+
+class ConfigController:
+    """Configuration controller
+    """
+
+    def __init__(self):
+        self.root = libcalamares.globalstorage.value("rootMountPoint")
+
+    def terminate(self, proc):
+        """Send SIGKILL to the given proccess
+        """
+
+        target_env_call(['killall', '-9', proc])
+
+    def run(self):
+        """Run the controller
+
+        Workaround for pacman-key bug
+        FS#45351 https://bugs.archlinux.org/task/45351
+        We have to kill gpg-agent because if it stays
+        around we can't reliably unmount
+        the target partition.
+        """
+
+        self.terminate('gpg-agent')
+
+        # Update grub.cfg
+        if (exists(join(self.root, "usr/bin/update-grub")) and
+                libcalamares.globalstorage.value("bootLoader") is not None):
+            target_env_call(["update-grub"])
+
+
+def run():
+    """ Misc postinstall configurations """
+
+    config = ConfigController()
+
+    return config.run()
diff --git a/src/modules/postcfg/module.desc b/src/modules/postcfg/module.desc
new file mode 100644
index 000000000..77e9ca4dd
--- /dev/null
+++ b/src/modules/postcfg/module.desc
@@ -0,0 +1,6 @@
+# Syntax is YAML 1.2
+---
+type:       "job"
+name:       "postcfg"
+interface:  "python"
+script:     "main.py"   #assumed relative to the current directory
diff --git a/src/modules/servicescfg/main.py b/src/modules/servicescfg/main.py
new file mode 100644
index 000000000..68da65c4e
--- /dev/null
+++ b/src/modules/servicescfg/main.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+#
+# === This file is part of Calamares - <http://github.com/calamares> ===
+#
+#   Copyright 2016, Artoo <artoo@manjaro.org>
+#   Copyright 2017, Philip Müller <philm@manjaro.org>
+#   Copyright 2016, Artoo <artoo@cromnix.org>
+#
+#   Calamares is free software: you can redistribute it and/or modify
+#   it under the terms of the GNU General Public License as published by
+#   the Free Software Foundation, either version 3 of the License, or
+#   (at your option) any later version.
+#
+#   Calamares is distributed in the hope that it will be useful,
+#   but WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#   GNU General Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License
+#   along with Calamares. If not, see <http://www.gnu.org/licenses/>.
+
+import libcalamares
+
+from libcalamares.utils import target_env_call
+from os.path import exists, join
+
+
+class ServicesController:
+    """This is the service controller
+    """
+
+    def __init__(self):
+        self.root = libcalamares.globalstorage.value('rootMountPoint')
+        self.services = libcalamares.job.configuration.get('services', [])
+
+    def setExpression(self, pattern, file):
+        """Sed the given file with the given pattern
+        """
+
+        target_env_call(["sed", "-e", pattern, "-i", file])
+
+    def configure(self):
+        """Configure the services
+        """
+
+        self.setExpression(
+            's|^.*rc_shell=.*|rc_shell="/usr/bin/sulogin"|',
+            "/etc/rc.conf"
+        )
+        self.setExpression(
+            's|^.*rc_controller_cgroups=.*|rc_controller_cgroups="YES"|',
+            "/etc/rc.conf"
+        )
+        exp = 's|^.*keymap=.*|keymap="{}"|'.format(
+            libcalamares.globalstorage.value("keyboardLayout")
+        )
+
+        self.setExpression(exp, "/etc/conf.d/keymaps")
+        for dm in libcalamares.globalstorage.value("displayManagers"):
+            exp = 's|^.*DISPLAYMANAGER=.*|DISPLAYMANAGER="{}"|'.format(dm)
+            self.setExpression(exp, "/etc/conf.d/xdm")
+
+    def update(self, action, state):
+        """Update init scripts
+        """
+
+        for svc in self.services[state]:
+            if exists(self.root + "/etc/init.d/" + svc["name"]):
+                target_env_call(
+                    ["rc-update", action, svc["name"], svc["runlevel"]]
+                )
+
+    def run(self):
+        """Run the controller
+        """
+
+        self.configure()
+        for state in self.services.keys():
+            if state == "enabled":
+                self.update("add", "enabled")
+            elif state == "disabled":
+                self.update("del", "disabled")
+
+
+def run():
+    """Setup openrc services
+    """
+
+    return ServicesController().run()
diff --git a/src/modules/servicescfg/module.desc b/src/modules/servicescfg/module.desc
new file mode 100644
index 000000000..3b092af56
--- /dev/null
+++ b/src/modules/servicescfg/module.desc
@@ -0,0 +1,6 @@
+---
+type:       "job"
+name:       "servicescfg"
+interface:  "python"
+requires:   []
+script:     "main.py"
diff --git a/src/modules/servicescfg/servicescfg.conf b/src/modules/servicescfg/servicescfg.conf
new file mode 100644
index 000000000..335ad19a5
--- /dev/null
+++ b/src/modules/servicescfg/servicescfg.conf
@@ -0,0 +1,12 @@
+---
+services:
+    enabled:
+        - name: "NetworkManager"
+          runlevel: "default"
+        - name: "dbus"
+          runlevel: "default"
+        - name: "elogind"
+          runlevel: "boot"
+#    disabled:
+#        - name: "hwclock"
+#          runlevel: "boot"
